1.数据可以绑定到dom文本或者attribute或者dom结构
2.在Vue里,一个组件本质上是一个拥有预定义选项的一个Vue实例
3.Vue组件非常类似于自定义元素
4.所有的Vue组件都是Vue实例,并且接受相同的选项对象(一些根实例特有的选项除外)
5.当一个Vue实例被创建时,它将data对象中的所有的property加入到Vue的响应式系统中
6.生命周期钩子的this上下文指向调用它的Vue实例
7.因为箭头函数并没有 this
8.选项对象, 选项的property
9.data选项对象中的msg property
10.mustache(双大括号)语法不能作用在html attribue上,遇到这种情况应该使用v-bind指令
11.js表达式会在所属Vue实例的数据作用域下作为JavaScript被解析,有个限制就是,每个绑定都只能包含单个表达式
12.v-bind指令可以用于响应式的更新html attribute
13.<a v-bind:href="url">中href是参数,告知v-bind指令将该元素的href attribure与表达式url的值绑定
14.v-model指令能轻松实现表单输入和应用状态之间的双向绑定
15.camelCase驼峰式kebab-case短横线分隔
16.event.preventDefault()是通知浏览器不要执行与事件关联的默认动作
17.内联语句处理器
18.v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据
19.如果不对 span 应用样式，那么 span 元素中的文本与其他文本不会任何视觉上的差异
20.组件是可复用的 Vue 实例,所以它们与 new Vue 接收相同的选项
21.全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例
22.prop是你可以在组件上注册的一些自定义 attribute,当一个值传递给一个 prop attribute 的时候,它就变成了那个组件实例的一个 property
23.自定义组件名 (字母全小写且必须包含一个连字符)
24.全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生
25.HTML中的attribute名是大小写不敏感的,所以浏览器会把所有大写字符解释为小写字符,这意味着当你使用DOM中的模板时,camelCase的prop名需要使用其等价的kebab-case命名
26.assets代表js,css,模板,图片,flash等等资源文件,assets就是资源的意思,一般表示静态资源,存放在cdn上。
27.命令式编程和声明式编程
28.函数和方法其实不是一回事,最外边的一般叫做函数,对象里边的叫方法
29.kebab-case(短横线分隔命名)指通过横线分隔的形式,比如my-component-name,(kebab是烤羊肉串的意思)
30.PascalCase(首字母大写命名)指各个单词首字母大写的形式,比如MyComponentName
31.引用这个自定义元素时两种命名法都可以使用,但是,直接在DOM(即非字符串的模板)中使用时只有 kebab-case 是有效的
32.props最好都是小写,如果有大写,在父组件中传值时需要转换成短横线-,否则会报错
33.事件后边不加括号时,v-on:click=myclic,原生时间默认会把当前事件传过去,自定义事件默认会把子组件的发射的参数传过去
34.事件名,props名,组件名
35.camelCase和PascalCase和kebab-case
36.事件名:事件名不存在任何自动化的大小写转换(myEvent只会匹配myEvent),推荐你始终使用kebab-case的事件名
37:prop名:使用DOM中的模板时,camelCase的prop名(在组件定义中是camelCase)需要使用其等价的kebab-case命名(在HTML中是kebab-case)
38.Vue组件非常类似于自定义元素
39.像这样给子组件prop传入一个静态的值,<blog-post title="My journey with Vue"></blog-post>
40.像这样给子组件prop传入一个动态的值,<blog-post v-bind:title="post.title"></blog-post>
41.你只需要明白所有的Vue组件都是 Vue 实例,并且接受相同的选项对象 (一些根实例特有的选项除外)
42.直接在终端中使用webpack命令默认使用的是全局的,只有运行npm run build时,才使用的是本地安装的呢
------commonjs模块化的方法
43.CommonJS规范规定,每个模块内部,module变量代表当前模块,这个变量是一个对象,它的exports属性(即module.exports)是对外的接口,加载某个模块,其实是加载该模块的module.exports属性
44.暴露模块：module.exports = value或exports.xxx = value
45.require命令的基本功能是,读入并执行一个JavaScript文件,然后返回该模块的exports对象,如果没有发现指定模块,会报错
46.引入模块：require(xxx),如果是第三方模块，xxx为模块名；如果是自定义模块，xxx为模块文件路径
------ES6模块化的方法
47.export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能
48.$router是VueRouter的实例方法(我目前理解为就是VueRouter对象),当导航到不同url，可以使用this.$router.push方法
49.$route相当于当前激活的路由对象,包含当前url解析得到的数据,可以从对象里获取一些数据,如name,path等
50.生命周期钩子的 this 上下文指向调用它的 Vue 实例
51.箭头函数中没有this
##Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统
#所有的Vue组件都是Vue实例



































































































































































































